[
    {
        "role": "user",
        "content": "Modify this code to constantly record audio. Every 3 seconds, chunk the audio into sentences, and only respond to chunks containing the words \"hi\" \"hello\" or \"hey\" and the 2 chunks after(wait until all 3 are available, or 3 seconds have passed, whichever is first). \n\nimport os\nimport sys\nimport time\nimport wave\nimport keyboard\nimport pyaudio\nimport whisper\nimport openai\nimport librosa\nimport tempfile\nimport numpy as np\nimport torch\nfrom gtts import gTTS\nimport pygame\nfrom io import BytesIO\nos.environ[\"PATH\"] += os.pathsep + \"J:\\\\Program-Files\\\\ffmpeg-master-latest-win64-gpl\\\\bin\"\n\n# Setup OpenAI API key\nopenai.api_key = open(\"openai_api_key.txt\", \"r\").read()\n# Load Whisper model\nwhisper_model = whisper.load_model(\"base\")\nGPT_MODEL = \"gpt-3.5-turbo\"\nMAX_TOKENS = 150\nTEMPERATURE = 0.9\n# GPT-3 setup\ndef get_gpt3_response(prompt):\n    system_message=\"You are a helpful voice assistant.\"\n    response = openai.ChatCompletion.create(\n        model=GPT_MODEL,\n        messages= [{\"role\": \"system\", \"content\": system_message}]+\n            [{\"role\": \"user\", \"content\": prompt}],\n        max_tokens=MAX_TOKENS,\n        n=1,\n        temperature=TEMPERATURE,\n    ).choices[0].message.content\n    return response\n\n# Record audio\ndef record_audio(output_file_path):\n    CHUNK = 1024\n    FORMAT = pyaudio.paInt16\n    CHANNELS = 1\n    RATE = 16000\n\n    p = pyaudio.PyAudio()\n\n    stream = p.open(\n        format=FORMAT,\n        channels=CHANNELS,\n        rate=RATE,\n        input=True,\n        input_device_index=2,\n        frames_per_buffer=CHUNK,\n    )\n\n    print(\"Press and hold the SPACE key to record, release to stop\")\n\n    while True:\n        if keyboard.is_pressed(\"space\"):\n            print(\"Recording...\")\n            frames = []\n\n            while keyboard.is_pressed(\"space\"):\n                data = stream.read(CHUNK)\n                frames.append(data)\n\n            with wave.open(output_file_path, \"wb\") as wf:\n                wf.setnchannels(CHANNELS)\n                wf.setsampwidth(p.get_sample_size(FORMAT))\n                wf.setframerate(RATE)\n                wf.writeframes(b\"\".join(frames))\n\n            print(\"Recording saved\")\n            break\n\n    stream.stop_stream()\n    stream.close()\n    p.terminate()\n\n# Transcribe audio to text\ndef transcribe_audio(audio_file_path):\n    # load audio and pad/trim it to fit 30 seconds\n    audio = whisper.load_audio(audio_file_path)\n    audio = whisper.pad_or_trim(audio)\n\n    # make log-Mel spectrogram and move to the same device as the model\n    mel = whisper.log_mel_spectrogram(audio).to(whisper_model.device)\n\n    # detect the spoken language\n    _, probs = whisper_model.detect_language(mel)\n    print(f\"Detected language: {max(probs, key=probs.get)}\")\n\n    # decode the audio\n    options = whisper.DecodingOptions(fp16 = False)\n    result = whisper.decode(whisper_model, mel, options)\n\n    # print the recognized text\n    print(result.text)\n\n    # Return the recognized text\n    return result.text\ndef speak(text):\n    tts = gTTS(text=text, lang='en')\n    tts.save(\"response.mp3\")\n    pygame.mixer.init()\n    pygame.mixer.music.load(\"response.mp3\")\n    pygame.mixer.music.play()\n    while pygame.mixer.music.get_busy():\n        pygame.time.Clock().tick(10)\n    pygame.mixer.quit()\n# Main function\ndef main():\n    while True:\n        #create new file to store audio\n        with tempfile.NamedTemporaryFile(mode='wb', suffix='.wav', delete=False) as temp_file:\n            record_audio(temp_file.name)\n\n            print(\"Transcribing audio...\")\n            transcribed_text = transcribe_audio(temp_file.name)\n            print(\"Transcription: \", transcribed_text)\n\n            print(\"Getting GPT-3 response...\")\n            response = get_gpt3_response(transcribed_text)\n            print(\"GPT-3 Response: \", response)\n\n            # Convert text to speech\n            speak(response)\n            print(\"\\nPress ENTER to continue or 'q' to quit\")\n            user_input = input()\n            if user_input == \"q\":\n                break\n\nif name == \"main\":\n    main()"
    },
    {
        "role": "user",
        "content": "complete previous message"
    }
]